let rec f

let (fib : int -> int ) = 
fun n ->
if n = 0 then 1
else if n = 1 then 1
else

let fib2 n =
 let rec fib2_helper k fk_1 fk : int =
  if n = k then fk
  else fib2_helper (k_1) fk (fk_1 + fk)
 in if n < 2 then n else fib2_helper 1 0 1
;;

let rec (elim_dup : 'a list -> 'a list) = 
fun l ->
match l with
[] -> []
| [_] -> [_]
| head::second::rest ->
 if head = second -> elim_dup second::rest
 else head::elim second::rest

